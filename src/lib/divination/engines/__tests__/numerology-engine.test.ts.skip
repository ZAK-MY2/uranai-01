import { describe, it, expect, beforeEach } from 'vitest';
import { NumerologyEngine, NumerologyResult } from '../numerology-engine';
import { DivinationInput, EnvironmentData } from '../base-engine';

describe('NumerologyEngine', () => {
  let testInput: DivinationInput;
  let testEnvironment: EnvironmentData;

  beforeEach(() => {
    testInput = {
      fullName: '山田太郎', // Yamada Taro
      birthDate: new Date('1990-05-15'), // 1+9+9+0+5+1+5 = 30 = 3
      birthTime: '14:30',
      birthPlace: { lat: 35.6762, lon: 139.6503, name: '東京' },
      currentLocation: { lat: 35.6762, lon: 139.6503, name: '東京' },
      question: '仕事について',
      questionCategory: '仕事・転職'
    };

    testEnvironment = {
      weather: {
        temp: 22,
        main: 'Clear',
        description: '晴れ'
      },
      lunar: {
        phase: 0.25,
        phaseName: '上弦の月',
        illumination: 50
      },
      planetary: {
        hourRuler: 'Mercury',
        dayRuler: 'Mars'
      }
    };
  });

  describe('calculate', () => {
    it('数秘術の結果を正しく計算する', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();

      expect(result).toHaveProperty('lifePathNumber');
      expect(result).toHaveProperty('destinyNumber');
      expect(result).toHaveProperty('soulNumber');
      expect(result).toHaveProperty('personalityNumber');
      expect(result).toHaveProperty('luckyNumbers');
      expect(result).toHaveProperty('compatibility');
      expect(result).toHaveProperty('interpretation');
    });

    it('生命数を正しく計算する（マスターナンバーを含む）', () => {
      // 1990-05-15 = 1+9+9+0+5+1+5 = 30 = 3
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      expect(result.lifePathNumber).toBe(3);

      // マスターナンバー11のテスト
      const masterInput = {
        ...testInput,
        birthDate: new Date('1992-11-29') // 1+9+9+2+1+1+2+9 = 38 = 11
      };
      const masterEngine = new NumerologyEngine(masterInput, testEnvironment);
      const masterResult = masterEngine.calculate();
      expect(masterResult.lifePathNumber).toBe(11);
    });

    it('運命数を名前から計算する', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result.destinyNumber).toBeGreaterThanOrEqual(1);
      expect(result.destinyNumber).toBeLessThanOrEqual(33);
    });

    it('ラッキーナンバーを3つ生成する', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result.luckyNumbers).toHaveLength(3);
      result.luckyNumbers.forEach(num => {
        expect(num).toBeGreaterThanOrEqual(1);
        expect(num).toBeLessThanOrEqual(9);
      });
    });

    it('相性の良い数字と悪い数字を判定する', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result.compatibility.bestNumbers).toBeInstanceOf(Array);
      expect(result.compatibility.challengingNumbers).toBeInstanceOf(Array);
      expect(result.compatibility.bestNumbers.length).toBeGreaterThan(0);
      expect(result.compatibility.challengingNumbers.length).toBeGreaterThan(0);
    });
  });

  describe('interpretation', () => {
    it('解釈テキストが生成される', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result.interpretation.lifePathMeaning).toBeTruthy();
      expect(result.interpretation.lifePathMeaning).toContain('生命数3');
      
      expect(result.interpretation.currentCycle).toBeTruthy();
      expect(result.interpretation.advice).toBeTruthy();
    });

    it('質問カテゴリーに応じたパーソナライズメッセージを生成する', () => {
      const engine = new NumerologyEngine(testInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result.personalizedMessage).toBeTruthy();
      expect(result.personalizedMessage).toContain('仕事');
    });

    it('質問がない場合でも動作する', () => {
      const noQuestionInput = {
        ...testInput,
        question: undefined,
        questionCategory: undefined
      };
      
      const engine = new NumerologyEngine(noQuestionInput, testEnvironment);
      const result = engine.calculate();
      
      expect(result).toBeTruthy();
      expect(result.personalizedMessage).toBeFalsy();
    });
  });

  describe('環境要因の影響', () => {
    it('環境データがある場合、ラッキーナンバーに影響する', () => {
      const engine1 = new NumerologyEngine(testInput, testEnvironment);
      const result1 = engine1.calculate();
      
      const differentEnvironment = {
        ...testEnvironment,
        lunar: { ...testEnvironment.lunar, phase: 0.75 }
      };
      const engine2 = new NumerologyEngine(testInput, differentEnvironment);
      const result2 = engine2.calculate();
      
      // 環境が異なれば、ラッキーナンバーも変わる可能性がある
      expect(result1.luckyNumbers).toBeDefined();
      expect(result2.luckyNumbers).toBeDefined();
    });

    it('環境データがなくても動作する', () => {
      const engine = new NumerologyEngine(testInput);
      const result = engine.calculate();
      
      expect(result).toBeTruthy();
      expect(result.lifePathNumber).toBe(3);
    });
  });

  describe('特殊な数字の扱い', () => {
    it('マスターナンバー（11, 22, 33）を正しく扱う', () => {
      const masterDates = [
        { date: new Date('1992-11-29'), expected: 11 }, // 38 = 11
        { date: new Date('1988-12-31'), expected: 22 }, // 40 = 22 (仮の例)
      ];

      masterDates.forEach(({ date, expected }) => {
        const input = { ...testInput, birthDate: date };
        const engine = new NumerologyEngine(input);
        const result = engine.calculate();
        
        if (result.lifePathNumber === expected) {
          expect(result.interpretation.lifePathMeaning).toContain(`マスターナンバー${expected}`);
        }
      });
    });

    it('数字ごとの特性を正しく解釈する', () => {
      const numberTraits = {
        1: 'リーダーシップ',
        2: '協調性',
        3: '創造性',
        4: '安定',
        5: '自由',
        6: '責任',
        7: '内省',
        8: '物質的成功',
        9: '博愛'
      };

      Object.entries(numberTraits).forEach(([num, trait]) => {
        // 特定の生命数になるような日付を作成（簡易的）
        const engine = new NumerologyEngine(testInput, testEnvironment);
        const result = engine.calculate();
        
        if (result.lifePathNumber === parseInt(num)) {
          expect(result.interpretation.lifePathMeaning).toContain(trait);
        }
      });
    });
  });

  describe('エッジケースとエラーハンドリング', () => {
    it('長い名前でも正しく処理する', () => {
      const longNameInput = {
        ...testInput,
        fullName: '非常に長い名前を持つ人物のテストケースです'
      };
      
      const engine = new NumerologyEngine(longNameInput);
      const result = engine.calculate();
      
      expect(result.destinyNumber).toBeGreaterThanOrEqual(1);
      expect(result.destinyNumber).toBeLessThanOrEqual(33);
    });

    it('特殊文字を含む名前でも動作する', () => {
      const specialNameInput = {
        ...testInput,
        fullName: 'Jean-François O\'Neill'
      };
      
      const engine = new NumerologyEngine(specialNameInput);
      expect(() => engine.calculate()).not.toThrow();
    });

    it('未来の日付でも計算できる', () => {
      const futureInput = {
        ...testInput,
        birthDate: new Date('2030-01-01')
      };
      
      const engine = new NumerologyEngine(futureInput);
      const result = engine.calculate();
      
      expect(result.lifePathNumber).toBeGreaterThanOrEqual(1);
      expect(result.lifePathNumber).toBeLessThanOrEqual(33);
    });
  });
});